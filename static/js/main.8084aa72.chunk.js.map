{"version":3,"sources":["logo.svg","components/Facebook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Facebook","state","isLoggedIn","userID","name","email","picture","responseFacebook","response","setState","userId","data","url","componentClicked","console","log","fbContent","this","style","width","margin","background","padding","src","alt","appId","autoLoad","fields","onClick","callback","Component","App","className","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,kOCGtBC,E,4MACjBC,MAAQ,CACJC,YAAY,EACZC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,QAAS,I,EAGbC,iBAAmB,SAAAC,GAGhB,EAAKC,SAAS,CACVP,YAAY,EACZQ,OAAQF,EAASL,OACjBC,KAAMI,EAASJ,KACfC,MAAOG,EAASH,MAChBC,QAASE,EAASF,QAAQK,KAAKC,O,EAItCC,iBAAmB,kBAAMC,QAAQC,IAAI,Y,uDAEjC,IAAIC,EAuBJ,OApBIA,EADDC,KAAKhB,MAAMC,WAEN,yBAAKgB,MAAO,CACZC,MAAM,QACNC,OAAQ,OACRC,WAAY,UACZC,QAAS,SAET,yBAAKC,IAAKN,KAAKhB,MAAMK,QAASkB,IAAKP,KAAKhB,MAAMG,OAC9C,uCAAaa,KAAKhB,MAAMG,MAPxB,UAQQa,KAAKhB,MAAMI,OAIV,kBAAC,IAAD,CACToB,MAAM,kBACNC,UAAU,EACVC,OAAO,qBACPC,QAASX,KAAKJ,iBACdgB,SAAUZ,KAAKV,mBAGnB,6BACKS,O,GAhDqBc,aCmBvBC,MAff,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKT,IAAKU,IAAMD,UAAU,WAAWR,IAAI,SACzC,0EAGA,kBAAC,EAAD,SCHYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.8084aa72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport FacebookLogin from 'react-facebook-login'\r\n\r\nexport default class Facebook extends Component {\r\n    state = {\r\n        isLoggedIn: false,\r\n        userID: '',\r\n        name: '',\r\n        email: '',\r\n        picture: '' \r\n    }\r\n    \r\n    responseFacebook = response => {\r\n       // console.log(response);\r\n\r\n       this.setState({\r\n           isLoggedIn: true,\r\n           userId: response.userID,\r\n           name: response.name,\r\n           email: response.email,\r\n           picture: response.picture.data.url\r\n       });\r\n    };\r\n\r\n    componentClicked = () => console.log(\"clicked\");\r\n    render() {\r\n        let fbContent;\r\n\r\n        if(this.state.isLoggedIn){\r\n            fbContent = (\r\n                <div style={{\r\n                width:'400px',\r\n                margin: 'auto',\r\n                background: '#282c34',\r\n                padding: '20px'\r\n            }}>\r\n                <img src={this.state.picture} alt={this.state.name} />\r\n                <h2>Welcome {this.state.name}</h2>\r\n                Email: {this.state.email}\r\n                </div>\r\n            );\r\n        } else {\r\n            fbContent = (<FacebookLogin\r\n                appId=\"578002626154441\"\r\n                autoLoad={true}\r\n                fields=\"name,email,picture\"\r\n                onClick={this.componentClicked}\r\n                callback={this.responseFacebook}/>)\r\n        }\r\n        return (\r\n            <div>\r\n                {fbContent}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Facebook from './components/Facebook';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          To get started, authenticate with Facebook.\n        </p>\n        <Facebook />\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}